# last modified: 20201201
echo
echo " ******************************************************"
echo " ***                  IngMod                        ***"
echo " *** Input number generator for Moodle calculations ***"
echo " ******************************************************"
echo


# Read and check input
ingmodfile=$1
if [[ $ingmodfile == "--help" ]]; then
 echo " This script enables the generation of input numbers for Moodle tests."
 echo " Usage:"
 echo " [1] ingmod.sh <ingmodfile> ; where <ingmodfile> is the control file of the script" 
 echo " [2] ingmod.sh; where the control file will be searched with 'ls -1 | grep *.ingmod' command"
 echo " For more help regarding the necessary files:"
 echo " ingmod.sh --help-ingmodfile"
 echo " ingmod.sh --help-paramfile"
 echo " ingmod.sh --help-calc_script"
 echo " ingmod.sh --help-xmltemp"
 exit
fi
if [[ $ingmodfile == "--help-ingmodfile" ]]; then
 echo 
 echo " Control file options:"
 echo " paramfile=<string>"
 echo " The name of the file which contains the necessary parameters."
 echo " Default: the 'ls -1 | grep *.param' command will search the <paramfile> file"
 echo 
 echo " xmltemp=<string>"
 echo " The name of the XML template file."
 echo " Default: the 'ls -1 | grep *.xmltemp' command will search the xml template file"
 echo
 echo " calc_script=<string>"
 echo " The name of the (python) calculation script."
 echo " Default: the 'ls -1 | grep *.py' command will search the (python) calculation script file"
 echo
 echo " taskname=<string>"
 echo " The name of the task."
 echo " Default: non"
 echo 
 echo " verbosity=<integer>"
 echo " Controls the verbosity of the script."
 echo " verbosity=1 minimal info about script processes."
 echo " verbosity=2 the generated input can be seen in addition to option 1."
 echo " verbosity=3 the generated output can be seen in addition to option 1."
 echo " verbosity=4 the generated input and output can be seen in addition to option 1."
 echo " verbosity=5 the processeses can be seen in addition to option 4."
 echo " Default: verbosity=1"
 echo
 echo " taskid=<integer>"
 echo " Sets the ID of the task. This number will appear in all task name."
 echo " Default: taskid=1"
 echo 
 echo " ntasks=<integer>"
 echo " Sets the number of tasks that are generated."
 echo " Default ntasks=1"
 echo
 echo " task_startnum=<integer>"
 echo " The number identifier for the first task which is generated."
 echo " If task_startnum=31, and ntasks=10, then 10 task will be generated"
 echo " with the names <taskid>-<task_startnum>,<taskid>-<task_startnum+1>,...,<taskid>-<task_ntasks>"
 echo " Default: task_startnum=1"
 echo
 echo " varscale=<integer>"
 echo " Sets the scale for the outputs of the calculation script."
 echo " Default: varscale=3"
 echo
 echo " varaccept=<real>"
 echo " Sets the acceptable variance for the outputs of the calculation script."
 echo " Example: the right answer is 100 J/mol, and 'varaccept=0.01' then answers between 99-101 J/mol will be accepted."
 echo " Default: varaccept=0.05"
 echo
 echo " reject1=<\"<string> <relationsign> <real>\""
 echo " Sets the rejection criteria, <real>, for a given quantity denotes with <string>. Evaluation is done using the bc program."
 echo " Example: to guarantee that the calculated electromotive force (E) is positive:"
 echo " reject=\" E < 0.0 \""
 echo " Default: non"
 echo 
 echo " reject2=<\"<string> <relationsign> <real>\""
 echo " See the decription of reject1."
 echo " Default: non"
 echo
 echo " specout=<string1> <string2> ... <stringN>"
 echo " Specifies certain quantities (denoted with <string1>, <string2>, ..., <stringN>) which appear as input parameters in the text of the task but actually calculated by the python script. This feauture makes the tasks more easier to understand without producing problematic dependencies in the generated input."
 echo " Example: In a parallel reaction, the initial concentration of the reactant (Ainit) and the final concentration of the product B (Bfin) are generated by the ingmod.sh script. One wants do specify the concentration of the products in text (INGMOD_Bfin and INGMOD_Cfin) thus Cfin is calculated as"
 echo " Cfin=Ainit-Bfin (in the python script), and Cfin is specified as"
 echo " specout=Cfin"
 echo " Default: non"
 echo 
 echo " numberform=<string>"
 echo " Sets the format of the floating numbers in text of the task."
 echo " Default: numberform=dot; other option: numberform=comma" 
 echo
 echo " randomfreq=<integer>"
 echo " Specifies the number of random number generations before it is accepted as a parameter. Warning: if randfreq is high, then the task generating will be slow, however, if randomfreq is low, the generated task will be more likely identical."
 echo " Example: to increase the task generation speed define randomfreq=100"
 echo " Default: randomfreq=200"
 exit
fi
if [[ $ingmodfile == "--help-paramfile" ]]; then
 echo "Parameter file format:"
 echo "<quantity-1> <lower-bound-1> <upper-bound-1>"
 echo "<quantity-2> <lower-bound-2> <upper-bound-2>"
 echo "<quantity-3> <lower-bound-3> <upper-bound-3>"
 echo "."
 echo ".."
 echo "..."
 echo "<quantity-n> <lower-bound-n> <upper-bound-n>"
 echo
 echo " where <quantity-n> is a string, <lower-bound-n> and <upper-bound-n> are real numbers."
 echo 
 echo " Resctrictions on <lower-bound-n> and <upper-bound-n>:"
 echo " + <upper-bound-n> must be larger than <lower-bound-3>"
 echo " + format of these numbers: 12.34 or 1.234e1"
 echo " Resctrictions on <quantity-n>:"
 echo " + The quantity must be denoted with the same string in the calculation script"
 echo " + The quantity must be denoted in the xml-template as INGMOD_<quantity-n>"
 exit
fi
if [[ $ingmodfile == "--help-calc_script" ]]; then
 echo " Calculation file information:"
 echo " Currently, only python calculation scripts are supported."
 echo
 echo " *** Input handling ***" 
 echo " The script must contain: "
 echo " import os"
 echo " The input parameters can be accessed through the \"INGMOD_<quantity-n>\" environment variables,"  
 echo " where <quantity-n> input parameter must be the same quantity denotes as <quantity-n> in the parameter file." 
 echo " The import command:"
 echo " string=os.environ['INGMOD_<quantity_n>']"
 echo " The string then have to be converted into a real number as:"
 echo " <quantity_n>=float(string)" 
 echo
 echo " *** Output handling ***"
 echo " Formatted output is required by the ingmod.sh script, thus "
 echo " for each output quantity:"
 echo " print(\"<outquantity_n>=%-25.20f\" %(<outquantity_n>))" 
 echo " Note that <outquantity_n> must be denoted as INGMOD_<outquantity_n> in the xml template file. "
 exit
fi
if [[ $ingmodfile == "--help-xmltemp" ]]; then
 echo " The xml template should look like this:"
 echo
 echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
 echo "<quiz>"
 echo "<!-- question: 14927  -->"
 echo " <question type=\"cloze\">"
 echo "   <name>"
 echo "     <text>INGMOD-TASKID - INGMOD-TASKNUM - INGMOD-TASKNAME</text>"
 echo "   </name>"
 echo "   <questiontext format=\"html\">"
 echo "     <text><![CDATA[ Multiple choice question text."
 echo "{MCSPOINT:MCS:~%PP1% ANSWER1 ~%PP2% ANSWER2 ~%PP3% ANSWER3~%PP4% ANSWER4}"
 echo "Nmberical question text;"
 echo "{NMPOINT:NM:%NMPP%INGMOD_<outquantity-n>:INGMODVAR_<outquantity-n>}"
 echo "]]>"
 echo "     </text>"
 echo "  </questiontext>"
 echo "   <generalfeedback format=\"html\">"
 echo "     <text></text>"
 echo "   </generalfeedback>"
 echo "   <penalty>1</penalty>"
 echo "   <hidden>0</hidden>"
 echo "  <idnumber>INGMOD-TASKID - INGMOD-TASKNUM</idnumber>"
 echo " </question>"
 echo "</quiz>"
 echo
 echo " ,where"
 echo " INGMOD-TASKID is controlled by taskid=<integer> in the ingmodfile,"
 echo " INGMOD-TASKNAME is controlled by taskname=<string> in the ingmodfile,"
 echo " INGMOD-TASKNUM is controlled automatically."
 echo " Restrictions regarding text of the task in the xml template file:"
 echo " In the xml, the following string should be used:"
 echo " INGMOD_<quantity-n> ; for input quantities."
 echo " INGMOD_<outquantity-n> ; for output quantities."
 echo " INGMODVAR_<outquantity-n> ; for the acceptence parameter of the output quantities."
 echo " Please note that input and outputs should not be denoted with the same string!"
 echo " Other notations:"
 echo " NMPOINT and MCSPOINT are the points for the numberial and multichoice subquestions."
 echo " PP1,PP1,...,PP4 are the percetage of points for a given ANSWER1,ANSWER2,...,ANSWER4, respectively."
 exit
fi
if [[ -z $ingmodfile ]]; then
 ingmodfile=`ls -1 | grep *.ingmod`
 if [[ -z $ingmodfile ]]; then
  echo " The IngMod control file is missing!"
  exit
 fi
else
 if [[ -z `ls -1 | grep $ingmodfile` ]]; then
  echo " The IngMod control file is missing!"
  exit
 fi
fi
taskname=`grep "taskname=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
paramfile=`grep "param=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
calc_script=`grep "calc_script=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
xmltemp=`grep "xmltemp=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
verbosity=`grep "verbosity=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
taskid=`grep "taskid=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
task_startnum=`grep "task_startnum=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
ntasks=`grep "ntasks=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
varscale=`grep "varscale=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
varaccept=`grep "varaccept=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
#scinotform=`grep "scinotform=" $ingmodfile | awk -F "=" '{print $2}'`
numberform=`grep "numberform=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
reject1=`grep "reject1=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
reject2=`grep "reject2=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
specout=`grep "specout=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
randomfreq=`grep "randomfreq=" $ingmodfile | head -1 | awk -F "=" '{print $2}'`
langnum=`locale | grep LC_NUMERIC | awk -F "=" '{print $2}' | cut -c1-2`
#
if [[ -z $randomfreq ]]; then
 randomfreq=200
fi
if [[ $reject1 ]]; then
 REJECTSYMB1=`echo $reject1 | awk '{print $1}' | cut -c2-`
 REJECTCRIT1=`echo $reject1 | awk '{print $2,$3}'` 
 REJECTCRIT1=${REJECTCRIT1::-1}
else
 REJECTSIMB1="OFF"
 REJECTCRIT1="OFF"
fi
if [[ $reject2 ]]; then
 REJECTSYMB2=`echo $reject2 | awk '{print $1}' | cut -c2-`
 REJECTCRIT2=`echo $reject2 | awk '{print $2,$3}'`
 REJECTCRIT2=${REJECTCRIT2::-1}
else
 REJECTSIMB2="OFF"
 REJECTCRIT2="OFF"
fi

#if [[ -z $scinotform ]]; then
# scinotform="enot"
#fi
if [[ -z $numberform ]]; then
 numberform="dot"
fi
if [[ -z $taskname ]]; then
 taskname=`echo $ingmodfile | rev | cut -c8- | rev`
fi
if [[ -z $verbosity ]]; then
 verbosity=1
fi
if [[ -z $task_startnum ]]; then
 task_startnum=1
fi
if [[ -z $ntasks ]]; then
 ntasks=1
fi
if [[ -z $taskid ]]; then
 taskid=1
fi
if [[ -z $varscale ]]; then
 varscale=3
else
 SCR=`echo "$varscale > 0" | bc -l`
 if [[ $SCR -eq 0 ]]; then
  echo " Illegal value for the scale of the deviation parameter."
  exit
 fi
fi
if [[ -z $varaccept ]]; then
 varaccept="0.05"
else
 SCR=`echo "$varaccept > 0" | bc -l`
 if [[ $SCR -eq 0 ]]; then
  echo " Illegal value for the variance parameter."
  exit
 fi
 SCR=`echo "$varaccept < 1.0" | bc -l`
 if [[ $SCR -eq 0 ]]; then
  echo " Illegal value for the variance parameter."
  exit
 fi
fi

# Check input parameters
if [[ -z $paramfile ]]; then
 paramfile=`ls -1 | grep *.param`
 if [[ -z $paramfile ]]; then
  echo " The parameter file is missing!"
  exit
 else
  echo " Parameter file: $paramfile "
 fi
else
 paramfile=`ls -1 | grep $paramfile`
 if [[ -z $paramfile ]]; then
  echo " The parameter file is missing!"
  exit
 else
  echo " Parameter file: $paramfile "
 fi
fi
# Check calculation script
if [[ -z $calc_script ]]; then
 calc_script=`ls -1 | grep *.py`
 if [[ -z $calc_script ]]; then
  echo " The calculation script is missing!"
  exit
 else
  echo " Calculation script: $calc_script "
 fi
else
 calc_script=`ls -1 | grep $calc_script`
 if [[ -z $calc_script ]]; then
  echo " The calculation script is missing!"
  exit
 else
  echo " Calculation script: $calc_script "
 fi
fi
# Check XML file
if [[ -z $xmltemp ]]; then
 xmltemp=`ls -1 | grep *.xml`
 if [[ -z $xmltemp ]]; then
  echo " The XML template is missing!"
  exit
 else
  echo " XML template: $xmltemp "
 fi
else
 xmltemp=`ls -1 | grep $xmltemp`
 if [[ -z $xmltemp ]]; then
  echo " The XML template is missing!"
  exit
 else
  echo " XML template: $xmltemp "
 fi
fi
if [[ $verbosity -gt 4 ]]; then
# echo " Format of scientific notation : $scinotform"
 echo " Format of real numbers        : $numberform"
 echo " Number of tasks requested     : $ntasks"
 echo " Task ID                       : $taskid"
 echo " Starting number of task       : $task_startnum"
 echo " Task name                     : $taskname"
fi
#
if [[ $verbosity -gt 4 ]]; then
 echo
 echo " Checking the parameter file ..."
fi
startparam=`grep -n "#startparam" $paramfile | awk -F ":" '{print $1}'`
startparam=$((startparam+1))
endparam=`grep -n "#endparam" $paramfile | awk -F ":" '{print $1}'`
endparam=$((endparam-1))
nlist=$((endparam - startparam + 1))
if [[ $nlist == 0 ]]; then
 echo " The input file is empty."
 echo " Something must have gone wrong..."
 exit
fi
list=" "
for (( iline=startparam; iline<=endparam; iline++ )); do
 symbol=`head -$iline $paramfile | tail -1 | awk '{print $1}'`
 list="$list $symbol"
done
i=$((startparam-1))
for param in $list; do
 i=$((i+1))
# echo "i = $i , param = $param"
 lbound=`cat $paramfile | awk '{print $2}' | head -$i | tail -1`
 ubound=`cat $paramfile | awk '{print $3}' | head -$i | tail -1`
# echo "lbound = $lbound, ubound = $ubound"
 if [[ -z $lbound ]]; then
  echo " Error! Lower bound for parameter $param is not defined!"
  exit
 fi
 if [[ -z $ubound ]]; then
  echo " Error! Higher bound for parameter $param is not defined!"
  exit
 fi
 if [[ $ubound == *"e"* ]]; then
  ubound=`echo $ubound | sed 's/e/*10^/g'`
 fi
 if [[ $lbound == *"e"* ]]; then
  lbound=`echo $lbound | sed 's/e/*10^/g'`
 fi
 IOUT=`echo "$lbound > $ubound" | bc -l `
 if [[ $IOUT -eq 1 ]]; then
  echo " Error! The lower bound is higher then the upper bound for parameter $param!"
  exit
 fi
 IOUT=`echo "$lbound == $ubound" | bc -l `
 if [[ $IOUT -eq 1 ]]; then
  echo " Error! The lower bound is equal with the upper bound for parameter $param!"
  exit
 fi
done
if [[ $verbosity -gt 4 ]]; then
 echo " Done. The input seems reasonable..."
fi 

# Write the found inputs
SCR=" "
i=0
for param in $list; do
 i=$((i+1))
 if [[ $i == 1 ]]; then
  SCR="$param"
 else
  SCR="$SCR,$param"
 fi
done
if [[ $verbosity -gt 4 ]]; then
 echo " $nlist variables are found: $SCR"
fi
#
### MAIN LOOP STARTS / JOB LOOP STARTS###
COLLQUEST=$taskid.xml
echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $COLLQUEST
echo "<quiz>" >> $COLLQUEST
echo " Generating xml files ..."
x=0
task_endnum=$((task_startnum+ntasks-1))
for (( tasknum=$task_startnum; tasknum<=$task_endnum; tasknum++)); do
 REJECT="OFF"
 x=$((x+1))
 cp $xmltemp worktemp.xml
 # Generate random numbers as input in the given intervals
 i=$((startparam-1))
 # PARAMETER LOOP starts
 for param in $list; do
  i=$((i+1))
  lbound=`cat $paramfile | awk '{print $2}' | head -$i | tail -1`
  ubound=`cat $paramfile | awk '{print $3}' | head -$i | tail -1`
#  echo "param  = $param"
#  echo "lbound = $lbound"
#  echo "ubound = $ubound"
  # Determien the scale 
  if [[ $ubound == *"e"* ]]; then
   ubound=`echo $ubound | sed 's/e/*10^/g'`
   ubound=`echo $ubound | bc -l`
   if [[ `echo $ubound | cut -c1` == '.' ]]; then
    ubound="0$ubound"
   elif [[ `echo $ubound | cut -c1-2` == '-.' ]]; then
    SCR=`echo $ubound | cut -c3-`
    ubound="-0.$SCR"
   fi
  fi
  if [[ $lbound == *"e"* ]]; then
   lbound=`echo $lbound | sed 's/e/*10^/g'`
   lbound=`echo $lbound | bc -l`
   if [[ `echo $lbound | cut -c1` == '.' ]]; then
    lbound="0$lbound"
   elif [[ `echo $lbound | cut -c1-2` == '-.' ]]; then
    SCR=`echo $lbound | cut -c3-`
    lbound="-0.$SCR"
   fi
  fi
  lboundnum=`echo $lbound | awk -F "." '{print $2}' | wc -m`
  uboundnum=`echo $ubound | awk -F "." '{print $2}' | wc -m`
  if [[ $ubound == *"10^"* ]]; then
   uboundnum=`echo $ubound | awk -F "^" '{print $2}'`
   uboundnum=`echo "sqrt($uboundnum^2)" | bc`
   uboundnum=${uboundnum%.*}
  fi
  if [[ $lbound == *"10^"* ]]; then
   lboundnum=`echo $lbound | awk -F "^" '{print $2}'`
   lboundnum=`echo "sqrt($lboundnum^2)" | bc`
   lboundnum=${lboundnum%.*}
  fi
#  echo "uboundnum = $uboundnum"
#  echo "lboundnum = $lboundnum"
#  echo "ubound = $ubound"
#  echo "lbound = $lbound"
  if [[ `echo "$uboundnum > $lboundnum " | bc ` == 1 ]]; then
   rscale=$uboundnum
  else
   rscale=$lboundnum
  fi
  if [[ $verbosity -gt 4 ]]; then
   echo " Generating input number..."
  fi
  for (( irand=1; irand<=randomfreq; irand++)); do
   INRANDNUM=`awk -v min=$lbound -v max=$ubound -v seed=$RANDOM 'BEGIN{srand(seed); print min+rand()*(max-min)}'`  
  done
#  echo "RANDOM NUMBER = $INRANDNUM"
  if [ $langnum == "hu" -o $langnum == "HU" ]; then
   INRANDNUM=`echo "$INRANDNUM" | sed "s|\.|,|i"`
  fi
  INRANDNUM=`printf "%."$rscale"f\n" $INRANDNUM`
  INRANDNUM=`echo "$INRANDNUM" | sed "s|,|\.|i"`
  export INGMOD_$param=$INRANDNUM
#  echo "INGMOD_$param = $INRANDNUM "
  # Format large numbers
  SCR=`echo $INRANDNUM | wc -m`
  if [[ $SCR -gt 8 ]]; then
   if [ $langnum == "hu" -o $langnum == "HU" ]; then
    INRANDNUM=`echo "$INRANDNUM" | sed "s|\.|,|i"`
   fi
   INRANDNUM=`printf "%8.4e\n" $INRANDNUM`
   INRANDNUM=`echo "$INRANDNUM" | sed "s|,|\.|i"`
   SUB1=`echo $INRANDNUM | awk -F "e" '{print $1}'`
   SUB2=`echo $INRANDNUM | awk -F "e" '{print $2}'`
   if [[ $SUB2 == *"+"* ]]; then
    SUB2=`echo "${SUB2//+}"`
    if [[ `echo "$SUB2" | cut -c1` == "0" ]]; then
     SUB2=`echo "$SUB2" | cut -c2-`
    fi
   fi
   if [[ $SUB2 == *"-"* ]]; then
    if [[ `echo "$SUB2" | cut -c2` == "0" ]]; then
     SUB2=`echo "$SUB2" | cut -c3-`
     SUB2="-"$SUB2
    fi
   fi
   INRANDNUM="$SUB1"e"$SUB2"
#  if [[ $scinotform == "normalized" ]]; then
#   INRANDNUM=`echo $INRANDNUM | sed 's|e|x10 \\\(^\{|i'`
#   INRANDNUM=$INRANDNUM'}\\\)'
#   echo "@enotform INRANDNUM="$INRANDNUM
#  fi
#  echo "RANDOMNUM in scientific = $INRANDNUM"
  fi
  # Substitute the patterns in the template with the input
  if [[ $numberform == "comma" ]]; then
   INRANDNUM=`echo "$INRANDNUM" | sed "s|\.|,|i"`
  fi
  INRANDNUM=" $INRANDNUM"
  if [[ $verbosity == 2 || $verbosity -gt 3 ]]; then
   echo "INGMOD_$param = $INRANDNUM"
  fi
  sed -i "s| INGMOD_$param|$INRANDNUM|g" worktemp.xml 
 done # PARAMETER LOOP ends
 # search for the number of subquestions where shiffling is necessary
 nq=`grep "#nq=" $paramfile | awk -F "=" '{print $2}'`
#  echo "nq = $nq"
 # EQSHUFLE LOOP STARTS
 for (( iq=1; iq<=nq; iq++ )); do
  startq=`grep -n "#startq$iq" $paramfile | awk -F ":" '{print $1}'`
  npoint=`grep "#startq$iq" $paramfile | awk '{print $2}'`
  endq=`grep -n "#endq$iq" $paramfile | awk -F ":" '{print $1}'` 
#  echo "startq = $startq"
#  echo "endq = $endq"
#  echo "npoint = $npoint"
  declare -a answerarr
  declare -a percanwer
  endq=$((endq-1))
  qline=$startq
  nans=0
  # EQ READER STARTS
  until [[ $qline -eq $endq ]]; do
   nans=$((nans+1))
   qline=$((qline+1))
   percanwer[$nans]=`head -$qline $paramfile | tail -1`
#   echo "percent: ${percanwer[nans]}"
   qline=$((qline+1))
   answerarr[$nans]=`head -$qline $paramfile | tail -1 | sed -e 's|[\\]|\\\\\\\\|g'`
#   echo "answer: ${answerarr[nans]}"
#   echo "qline = $qline endq = $endq"
  done # EQ READER ENDS
  maxans=$nans
  answerstring=" "
  moodstring="{$npoint:MCS:"   
  for (( k=1; k<=nans; k++ )); do
#   echo "maxans = $maxans"
#   echo "AVAILABLE ANSWERS:"
#   for (( l=1; l<=maxans; l++)); do
#    echo ${answerarr[l]}
#   done
#   echo 
   for (( irand=1; irand<=randomfreq; irand++)); do
    INRANDNUM=`awk -v min=1 -v max=$maxans -v seed=$RANDOM 'BEGIN{srand(seed); print int(min+rand()*(max-min+1))}'`
   done
#   echo "inrandnum = $INRANDNUM"
   answerstring=$answerstring" $k: <br> "${answerarr[INRANDNUM]}" <br>"
#   echo "answerstring START"
#   echo "answerstring: $answerstring"
#   echo "answerstring END"
   moodstring=$moodstring"%${percanwer[INRANDNUM]}% $k~"
#  if [[ ${percanwer[INRANDNUM]} -eq 100 ]]; then
#   echo "! hit ! k = $k"
#  fi
   scrstring=${answerarr[maxans]}
   scrperc=${percanwer[maxans]}
   answerarr[$maxans]=${answerarr[INRANDNUM]}
   percanwer[$maxans]=${percanwer[INRANDNUM]}
   answerarr[$INRANDNUM]=$scrstring
   percanwer[$INRANDNUM]=$scrperc
   maxans=$((maxans-1))
  done
  moodstring=$moodstring" }"
# echo "moodstring = $moodstring"
#  echo "FINAL start"
#  echo "FINAL answerstring = "$answerstring
#  echo "FINAL end"
  sed -i "s|INGMOD_qt$iq|${answerstring}|g" worktemp.xml
  sed -i "s|INGMOD_qp$iq|$moodstring|g" worktemp.xml
##
 done # EQ SHUFFLE LOOP ENDS
 if [[ $verbosity -gt 4 ]]; then
  echo " Done."
 fi
 # Execute calculation script
 if [[ $verbosity -gt 4 ]]; then
  echo " Executing the calculation script..."
 fi
 OUT=`sh -c "python $calc_script"`
 if [[ $verbosity -gt 4 ]]; then
  echo " Done."
 fi 
 if [[ $verbosity -gt 4 ]]; then
   echo " Processing the output of the script..."
  fi
 # Substitute the patterns in the template with the output
 # OUTPUT LOOP STARTS
 for outdat in $OUT; do
  OUTSYMB=`echo $outdat | awk -F "=" '{print $1}'`
  OUTDATA=`echo $outdat | awk -F "=" '{print $2}'`
  if [[ `echo $OUTDATA | cut -c1` == '.' ]]; then
   OUTDATA="0$OUTDATA"
  elif [[ `echo $OUTDATA | cut -c1-2` == '-.' ]]; then
   SCR=`echo $OUTDATA | cut -c3-`
   OUTDATA="-0."$SCR
  fi 
#  echo "OUTSYMB = $OUTSYMB , OUTDATE = $OUTDATA"
#  echo "REJECTSYMB1 = $REJECTSYMB1 , REJECTSYMB2 = $REJECTSYMB2"
#  echo "REJECTCRIT1 = $REJECTCRIT1 , REJECTCRIT2 = $REJECTCRIT1"
  OUTFORM="DEFAULT"
  for ispecout in $specout; do
   if [[ $OUTSYMB == $ispecout ]]; then
    OUTFORM="NONDEF"  
   fi
  done
  if [[ $OUTFORM == "DEFAULT" ]]; then
   SCR=`echo $OUTDATA | awk '{printf "%.100f\n", $1}'`
   DEVCRIT=`echo "scale=100; sqrt($SCR^2)*$varaccept" | bc -l`
   DEVCRIT=`echo $DEVCRIT | awk '{printf "%.10e\n", $1}'`
   OUTDATA=`echo $OUTDATA | awk '{printf "%.10e\n", $1}'`
  else
   OUTDATA=`echo $OUTDATA | awk '{printf "%.4f\n", $1}'`
   if [[ $numberform == "comma" ]]; then
    OUTDATA=`echo "$OUTDATA" | sed "s|\.|,|i"`
   fi
   DEVCRIT="0"
  fi
  if [[ $verbosity -gt 2 ]]; then
   echo "OUTSYMB = $OUTSYMB , OUTDATA = $OUTDATA , DEVCRIT = $DEVCRIT"  
  fi
  if [[ $REJECTSYMB1 != "OFF" ]]; then
   if [[ $OUTSYMB == $REJECTSYMB1 ]]; then
    if [[ `echo "$SCR $REJECTCRIT1" | bc ` == 1 ]]; then
     echo "!!! Rejected value !!! $OUTSYMB = $OUTDATA"
     REJECT="ON"
    fi
   fi
  fi
  if [[ $REJECTSYMB2 != "OFF" ]]; then
   if [[ $OUTSYMB == $REJECTSYMB2 ]]; then
    if [[ `echo "$SCR $REJECTCRIT2" | bc ` == 1 ]]; then
     echo "!!! Rejected value !!! $OUTSYMB = $OUTDATA"
     REJECT="ON"
    fi
   fi
  fi
#  echo "INGMOD_$OUTSYMB = $OUTDATA"
  sed -i "s|INGMOD_$OUTSYMB|$OUTDATA|g" worktemp.xml
  sed -i "s|INGMODVAR_$OUTSYMB|$DEVCRIT|g" worktemp.xml
 done # OUTPUT LOOP ENDS
 if [[ $verbosity -gt 4 ]]; then
   echo " Done."
  fi
 if [[ $verbosity -gt 1 ]]; then
  echo " Modifing the template file..."
 fi
 sed -i "s|INGMOD-TASKID|$taskid|g" worktemp.xml 
 sed -i "s|INGMOD-TASKNAME|$taskname|g" worktemp.xml
 sed -i "s|INGMOD-TASKNUM|$tasknum|g" worktemp.xml
 if [[ $REJECT == "OFF" ]]; then
  cp worktemp.xml $taskid-$tasknum".xml"
  echo " [ $x / $ntasks ] $taskid-$tasknum.xml is created."
  tail -n +3 worktemp.xml | head -n -1 >> $COLLQUEST
 fi
done 
echo " All files are generated."
### MAIN LOOP ENDS / JOB LOOP ENDS###
echo "<quiz>" >> $COLLQUEST
rm -f worktemp.xml
